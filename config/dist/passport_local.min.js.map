{"version":3,"sources":["passport_local.js"],"names":["passport","require","Strategy","User","use","usernameField","LocalStrategy","done","password","email","user","console","log","serializeUser","id","deserializeUser","userId","regeneratorRuntime","async","_context2","prev","next","awrap","findById","sent","abrupt","stop","checkAuthentication","req","res","isAuthenticated","redirect","setAuthenticatedUser","locals","module","exports"],"mappings":"aACA,IAAMA,SAAWC,QAAQ,YAAnBD,cAAkBC,QAAC,kBACzBC,SAGMC,KAAOF,QAAQ,kBAArBD,SAAUI,IAAGH,IAAAA,cAAQ,CAIbI,cAAe,SADvBL,SAAiBM,EAAAA,EAAcC,GAA/BP,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGIG,KAAsBK,QAAUD,CAAAA,MAAhCE,KAHJT,KAAAA,EAAAA,IAGIU,EAHJV,EAAAA,OAGIU,EAAAF,UAAAA,EAHJR,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAGIW,QAAAC,IAAA,6BAHJZ,EAAAA,OAAAA,SAGIO,EAAA,MAAA,IAHJP,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,SAGIO,EAAA,KAAAG,IAHJV,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,aAeAA,SAASa,cAAc,SAASH,EAAMH,GAZlCA,EAAA,KAAAG,EAAAI,MAAAd,SAAAe,gBAAA,SAAAD,EAAAP,GAAA,IAAAS,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAnB,KAAAoB,SAAAT,IAAA,KAAA,EAAA,GAAAE,EAAAG,EAAAK,KAAA,CAAAL,EAAAE,KAAA,EAAA,MAAA,OAoBIV,QAAQC,IAAI,2CApBhBO,EAAAM,OAAA,SAIQd,EAAQC,MAAI,IAJpB,KAAA,EAAA,OAAAO,EAAAM,OAAA,SAuBOlB,EAAK,KAAMS,IAvBlB,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAO,YAAA1B,SAAA2B,oBAAA,SAAAC,EAAAC,EAAAR,GAAA,OAAAO,EAAAE,kBAAAT,IAWJQ,EAAAE,SAAA,mBAGC/B,SAEDgC,qBAAA,SAAAJ,EAAAC,EAAAR,GAsBQO,EAAIE,oBArBaD,EAAAI,OAAAvB,KAAAkB,EAAAlB,MAAAW,KA8BzBa,OAAOC,QAAUnC","file":"passport_local.min.js","sourcesContent":["// require passport\nconst passport = require('passport');\n// storing strategy used for authentication\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst User = require('../models/user');\n\n// authentication using passport\npassport.use(new LocalStrategy({\n        usernameField: 'email'\n    },\n    async function(email, password, done) {\n        // find a user and establish the identity\n        let user = await User.findOne({ email: email });\n        if (!user || user.password != password) {\n            console.log('Invalid username/password');\n            return done(null, false);\n        }\n        return done(null, user);\n    }\n));\n\n// serializing the user to decide which key is to be kept in the cookies\npassport.serializeUser(function(user, done) {\n    done(null, user.id);\n});\n\n// deserializing the user from the key in the cookies\npassport.deserializeUser(async function(id, done) {\n    let userId = await User.findById(id);\n    if (!userId) {\n        console.log(\"Error in passport_local/deserializeUser\");\n        return done(null, false);\n    }\n    return done(null, userId);\n});\n\n// Checking authentication\npassport.checkAuthentication = function(req, res, next) {\n    // if user is signed in , then pass on the request ot the next fucntion (controller's action)\n    if (req.isAuthenticated()) {\n        return next();\n    }\n    // if the user is not signed in\n    return res.redirect('/users/sign-in');\n}\n\n// Setting authentication\npassport.setAuthenticatedUser = function(req, res, next) {\n    if (req.isAuthenticated()) {\n        // sending current signed in user to the locals for views\n        res.locals.user = req.user\n    }\n    next();\n}\n\n\n\nmodule.exports = passport;"]}