{"version":3,"sources":["passport_local.js"],"names":["passport","require","LocalStrategy","Strategy","User","use","usernameField","email","password","done","findOne","user","console","log","serializeUser","id","deserializeUser","findById","userId","checkAuthentication","req","res","next","isAuthenticated","redirect","setAuthenticatedUser","locals","module","exports"],"mappings":";;AAAA;AACA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB,C,CACA;;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAAP,CAA0BE,QAAhD;;AAEA,IAAMC,IAAI,GAAGH,OAAO,CAAC,gBAAD,CAApB,C,CAEA;;;AACAD,QAAQ,CAACK,GAAT,CAAa,IAAIH,aAAJ,CAAkB;AACvBI,EAAAA,aAAa,EAAE;AADQ,CAAlB,EAGT,iBAAeC,KAAf,EAAsBC,QAAtB,EAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEqBL,IAAI,CAACM,OAAL,CAAa;AAAEH,YAAAA,KAAK,EAAEA;AAAT,WAAb,CAFrB;;AAAA;AAEQI,UAAAA,IAFR;;AAAA,gBAGQ,CAACA,IAAD,IAASA,IAAI,CAACH,QAAL,IAAiBA,QAHlC;AAAA;AAAA;AAAA;;AAIQI,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAJR,2CAKeJ,IAAI,CAAC,IAAD,EAAO,KAAP,CALnB;;AAAA;AAAA,2CAOWA,IAAI,CAAC,IAAD,EAAOE,IAAP,CAPf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAHS,CAAb,E,CAcA;;AACAX,QAAQ,CAACc,aAAT,CAAuB,UAASH,IAAT,EAAeF,IAAf,EAAqB;AACxCA,EAAAA,IAAI,CAAC,IAAD,EAAOE,IAAI,CAACI,EAAZ,CAAJ;AACH,CAFD,E,CAIA;;AACAf,QAAQ,CAACgB,eAAT,CAAyB,kBAAeD,EAAf,EAAmBN,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACFL,IAAI,CAACa,QAAL,CAAcF,EAAd,CADE;;AAAA;AACjBG,UAAAA,MADiB;;AAAA,cAEhBA,MAFgB;AAAA;AAAA;AAAA;;AAGjBN,UAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AAHiB,4CAIVJ,IAAI,CAAC,IAAD,EAAO,KAAP,CAJM;;AAAA;AAAA,4CAMdA,IAAI,CAAC,IAAD,EAAOS,MAAP,CANU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB,E,CASA;;AACAlB,QAAQ,CAACmB,mBAAT,GAA+B,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACpD;AACA,MAAIF,GAAG,CAACG,eAAJ,EAAJ,EAA2B;AACvB,WAAOD,IAAI,EAAX;AACH,GAJmD,CAKpD;;;AACA,SAAOD,GAAG,CAACG,QAAJ,CAAa,gBAAb,CAAP;AACH,CAPD,C,CASA;;;AACAxB,QAAQ,CAACyB,oBAAT,GAAgC,UAASL,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACrD,MAAIF,GAAG,CAACG,eAAJ,EAAJ,EAA2B;AACvB;AACAF,IAAAA,GAAG,CAACK,MAAJ,CAAWf,IAAX,GAAkBS,GAAG,CAACT,IAAtB;AACH;;AACDW,EAAAA,IAAI;AACP,CAND;;AAUAK,MAAM,CAACC,OAAP,GAAiB5B,QAAjB","sourcesContent":["// require passport\nconst passport = require('passport');\n// storing strategy used for authentication\nconst LocalStrategy = require('passport-local').Strategy;\n\nconst User = require('../models/user');\n\n// authentication using passport\npassport.use(new LocalStrategy({\n        usernameField: 'email'\n    },\n    async function(email, password, done) {\n        // find a user and establish the identity\n        let user = await User.findOne({ email: email });\n        if (!user || user.password != password) {\n            console.log('Invalid username/password');\n            return done(null, false);\n        }\n        return done(null, user);\n    }\n));\n\n// serializing the user to decide which key is to be kept in the cookies\npassport.serializeUser(function(user, done) {\n    done(null, user.id);\n});\n\n// deserializing the user from the key in the cookies\npassport.deserializeUser(async function(id, done) {\n    let userId = await User.findById(id);\n    if (!userId) {\n        console.log(\"Error in passport_local/deserializeUser\");\n        return done(null, false);\n    }\n    return done(null, userId);\n});\n\n// Checking authentication\npassport.checkAuthentication = function(req, res, next) {\n    // if user is signed in , then pass on the request ot the next fucntion (controller's action)\n    if (req.isAuthenticated()) {\n        return next();\n    }\n    // if the user is not signed in\n    return res.redirect('/users/sign-in');\n}\n\n// Setting authentication\npassport.setAuthenticatedUser = function(req, res, next) {\n    if (req.isAuthenticated()) {\n        // sending current signed in user to the locals for views\n        res.locals.user = req.user\n    }\n    next();\n}\n\n\n\nmodule.exports = passport;"],"file":"passport_local.dev.js"}